# -*- coding: utf-8 -*-
"""Time.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TCPEls0h3fAs_cy_sfTRzFZ4XY7J_fTA
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import random

# Load the section, professional elective, and core section files from GitHub
section_url = 'https://raw.githubusercontent.com/satyam26en/flask-timetable-app/main/SECTION.csv'
elective_url = 'https://raw.githubusercontent.com/satyam26en/flask-timetable-app/main/Elective_TIME_TABLE.csv'
core_url = 'https://raw.githubusercontent.com/satyam26en/flask-timetable-app/main/CORE_TIME_TABLE_2%20-%20Sheet1.csv'

section_df = pd.read_csv(section_url)
elective_df = pd.read_csv(elective_url)
core_df = pd.read_csv(core_url)

# Normalize the 'Roll No.' column to ensure there are no leading/trailing spaces and consistent data type
section_df['Roll No.'] = section_df['Roll No.'].astype(str).str.strip()

# Define the order of days and times in 12-hour format
days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
times = ['8-9 AM', '9-10 AM', '10-11 AM', '11-12 PM', '12-1 PM', '1-2 PM', '2-3 PM', '3-4 PM', '4-5 PM']

# Mapping for days and times
day_mapping = {
    'MON': 'Monday',
    'TUE': 'Tuesday',
    'WED': 'Wednesday',
    'THU': 'Thursday',
    'FRI': 'Friday',
    'SAT': 'Saturday'
}

time_mapping = {
    '8-9': '8-9 AM',
    '9-10': '9-10 AM',
    '10-11': '10-11 AM',
    '11-12': '11-12 PM',
    '12-1': '12-1 PM',
    '1-2': '1-2 PM',
    '2-3': '2-3 PM',
    '3-4': '3-4 PM',
    '4-5': '4-5 PM'
}

# Function to format the timetable
def format_timetable(timetable_df):
    timetable_dict = {day: {time: "x" for time in times} for day in days}
    room_columns = [col for col in timetable_df.columns if 'ROOM' in col]
    for index, row in timetable_df.iterrows():
        for col in room_columns:
            if row[col] != '---':
                time_col_index = timetable_df.columns.get_loc(col) + 1
                time_col = timetable_df.columns[time_col_index]
                day = row['DAY']
                day_full = day_mapping.get(day, 'Unknown')
                if day_full == 'Unknown':
                    continue
                time_slot = time_mapping.get(time_col, time_col)
                subject = row.get(time_col, 'N/A')
                room_number = row[col]
                if subject.lower() != 'x':
                    timetable_dict[day_full][time_slot] = f"{subject} ({room_number})"
    return timetable_dict

# Streamlit UI
st.title('University Timetable')

roll_number = st.text_input('Enter Roll Number:')
if